local Camera = game:GetService("Workspace").CurrentCamera;
    local Mouse = game:GetService("Players").LocalPlayer:GetMouse();
    local Players = game:GetService("Players");
    local Player = Players.LocalPlayer;
    
    _G.FOV = 100;
    
    FOV_Circle = Drawing.new("Circle");
    FOV_Circle.Color = Color3.fromHSV(tick() % 5 / 5,1,1);
    FOV_Circle.Thickness = 1.5;
    FOV_Circle.NumSides = 9e9;
    FOV_Circle.Radius = _G.FOV;
    FOV_Circle.Visible = false;
    FOV_Circle.Filled = false;
    
    game:GetService('RunService').Stepped:connect(function()
        FOV_Circle.Position = Vector2.new(Mouse.X, Mouse.Y + 37)
    end)
    
    game:GetService("UserInputService").InputBegan:Connect(function(input)
            
            task.wait(.35);
        
            local function ClosestPlayerToCursor()
                local Closest = nil;
                local Distance = 9e9;
                for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                    if v ~= Player then
                        if Workspace[v.Name]:FindFirstChild("Humanoid") and Workspace[v.Name].Humanoid.Health ~= 0 then
                            local Position = Camera:WorldToViewportPoint(Workspace[v.Name].HumanoidRootPart.Position);
                            local Magnitude = (Vector2.new(Position.X, Position.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude;
                            if Magnitude < Distance and Magnitude < FOV_Circle.Radius then
                                Closest = workspace[v.Name];
                                Distance = Magnitude;
                            end
                        end
                    end
                end
                return Closest
            end
    
            local ThrowAtTarget = function(args1, args2, args3)
                return game:GetService("ReplicatedStorage").Remotes.ThrowKnife:FireServer(args1,args2,args3);
            end
            
            ThrowAtTarget(workspace[ClosestPlayerToCursor().Name].Head.Position, 0, CFrame.new());
            
    end)
